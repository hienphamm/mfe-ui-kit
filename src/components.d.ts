/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface UiButton {
        /**
          * @default ''
         */
        "class": string;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default ''
         */
        "label": string;
        /**
          * @default 'button'
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * @default 'default'
         */
        "variant": 'default' | 'primary' | 'secondary';
    }
    interface UiCard {
        "description": string;
        "heading": string;
        /**
          * @default false
         */
        "hoverEffect": boolean;
        "image": string;
        /**
          * @default true
         */
        "rounded": boolean;
        /**
          * @default 'md'
         */
        "shadow": 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'none';
    }
    interface UiDocs {
    }
    interface UiInput {
        /**
          * @default ''
         */
        "class": string;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default ''
         */
        "placeholder": string;
        /**
          * @default 'text'
         */
        "type": string;
        /**
          * @default ''
         */
        "value": string;
    }
    interface UiModal {
        /**
          * @default true
         */
        "closeOnBackdropClick": boolean;
        /**
          * @default false
         */
        "isOpen": boolean;
        /**
          * @default true
         */
        "rounded": boolean;
        /**
          * @default true
         */
        "showCloseButton": boolean;
        /**
          * @default 'md'
         */
        "size": 'sm' | 'md' | 'lg' | 'xl';
        /**
          * @default ''
         */
        "title": string;
    }
}
export interface UiButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiButtonElement;
}
export interface UiInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiInputElement;
}
export interface UiModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiModalElement;
}
declare global {
    interface HTMLUiButtonElementEventMap {
        "onClick": void;
    }
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiButtonElementEventMap>(type: K, listener: (this: HTMLUiButtonElement, ev: UiButtonCustomEvent<HTMLUiButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiCardElement extends Components.UiCard, HTMLStencilElement {
    }
    var HTMLUiCardElement: {
        prototype: HTMLUiCardElement;
        new (): HTMLUiCardElement;
    };
    interface HTMLUiDocsElement extends Components.UiDocs, HTMLStencilElement {
    }
    var HTMLUiDocsElement: {
        prototype: HTMLUiDocsElement;
        new (): HTMLUiDocsElement;
    };
    interface HTMLUiInputElementEventMap {
        "valueChange": string;
    }
    interface HTMLUiInputElement extends Components.UiInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiInputElementEventMap>(type: K, listener: (this: HTMLUiInputElement, ev: UiInputCustomEvent<HTMLUiInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiInputElementEventMap>(type: K, listener: (this: HTMLUiInputElement, ev: UiInputCustomEvent<HTMLUiInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiInputElement: {
        prototype: HTMLUiInputElement;
        new (): HTMLUiInputElement;
    };
    interface HTMLUiModalElementEventMap {
        "modalClosed": void;
        "modalOpened": void;
    }
    interface HTMLUiModalElement extends Components.UiModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiModalElementEventMap>(type: K, listener: (this: HTMLUiModalElement, ev: UiModalCustomEvent<HTMLUiModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiModalElementEventMap>(type: K, listener: (this: HTMLUiModalElement, ev: UiModalCustomEvent<HTMLUiModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiModalElement: {
        prototype: HTMLUiModalElement;
        new (): HTMLUiModalElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-card": HTMLUiCardElement;
        "ui-docs": HTMLUiDocsElement;
        "ui-input": HTMLUiInputElement;
        "ui-modal": HTMLUiModalElement;
    }
}
declare namespace LocalJSX {
    interface UiButton {
        /**
          * @default ''
         */
        "class"?: string;
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default ''
         */
        "label"?: string;
        "onOnClick"?: (event: UiButtonCustomEvent<void>) => void;
        /**
          * @default 'button'
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * @default 'default'
         */
        "variant"?: 'default' | 'primary' | 'secondary';
    }
    interface UiCard {
        "description"?: string;
        "heading"?: string;
        /**
          * @default false
         */
        "hoverEffect"?: boolean;
        "image"?: string;
        /**
          * @default true
         */
        "rounded"?: boolean;
        /**
          * @default 'md'
         */
        "shadow"?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'none';
    }
    interface UiDocs {
    }
    interface UiInput {
        /**
          * @default ''
         */
        "class"?: string;
        /**
          * @default false
         */
        "disabled"?: boolean;
        "onValueChange"?: (event: UiInputCustomEvent<string>) => void;
        /**
          * @default ''
         */
        "placeholder"?: string;
        /**
          * @default 'text'
         */
        "type"?: string;
        /**
          * @default ''
         */
        "value"?: string;
    }
    interface UiModal {
        /**
          * @default true
         */
        "closeOnBackdropClick"?: boolean;
        /**
          * @default false
         */
        "isOpen"?: boolean;
        "onModalClosed"?: (event: UiModalCustomEvent<void>) => void;
        "onModalOpened"?: (event: UiModalCustomEvent<void>) => void;
        /**
          * @default true
         */
        "rounded"?: boolean;
        /**
          * @default true
         */
        "showCloseButton"?: boolean;
        /**
          * @default 'md'
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xl';
        /**
          * @default ''
         */
        "title"?: string;
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-card": UiCard;
        "ui-docs": UiDocs;
        "ui-input": UiInput;
        "ui-modal": UiModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-card": LocalJSX.UiCard & JSXBase.HTMLAttributes<HTMLUiCardElement>;
            "ui-docs": LocalJSX.UiDocs & JSXBase.HTMLAttributes<HTMLUiDocsElement>;
            "ui-input": LocalJSX.UiInput & JSXBase.HTMLAttributes<HTMLUiInputElement>;
            "ui-modal": LocalJSX.UiModal & JSXBase.HTMLAttributes<HTMLUiModalElement>;
        }
    }
}
